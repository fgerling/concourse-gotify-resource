#!/bin/bash
set -euxo pipefail

cd "${1}"
payload=$(mktemp /tmp/resource-out.XXXXXX)
cat > "${payload}" <&0

>&2 printf "\n=====================\n"
>&2 cat $payload | jq
>&2 printf "\n=====================\n"

#debug="$(jq -r '.source.debug // "false"' < "${payload}")"

url="$(jq -r '.source.url' < "${payload}")"
token="$(jq -r '.source.token' < "${payload}")"
message="$(jq -r '.params.message' < "${payload}")"
title="$(jq -r '.params.title' < "${payload}")"
priority="$(jq -r '.params.priority' < "${payload}")"


re='^[0-9]+$'
if ! [[ $priority =~ $re ]] ; then
	priority=0
fi

notification="$(curl "${url}/message?token=${token}" \
	-F "title=${title}" \
	-F "message=${message}" \
	-F "priority=${priority}" \
	| jq "{id: .id|tostring, date: .date, message: .message, title: .title}")"

# ensure that $notification is a valid json payload
[ -z "$notification" ] && notification="{}"

out="$(cat <<EOF
{
  "version": ${notification},
  "metadata": [
    {"name": "url",     "value": "${url}"},
    {"name": "title",    "value": "${title}"},
    {"name": "message",    "value": "${message}"}
  ]
}
EOF
)"

echo $out
